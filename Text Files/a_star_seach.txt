A STAR pgm 1

Algorithm:

Step1: Place the starting node in the OPEN list.

Step 2: Check if the OPEN list is empty or not, if the list is empty then return failure and stops.

Step 3: Select the node from the OPEN list which has the smallest value of evaluation function (g+h), if node n is goal node then return success and stop, otherwise


Step 4: Expand node n and generate all of its successors, and put n into the closed list. For each successor n', check whether n' is already in the OPEN or CLOSED list, if not then compute evaluation function for n' and place into Open list.

Step 5: Else if node n' is already in OPEN and CLOSED, then it should be attached to the back pointer which reflects the lowest g(n') value.

Step 6: Return to Step 2.




Code :
def astar(start, end):
    open_set = set(start)
    closed_set = set()
    g = {}
    parents = {}

    g[start] = 0
    parents[start] = start

    while len(open_set) > 0:
        n = None
        for v in open_set:
            if n == None or g[v] + heuristics(v) < g[n] + heuristics(n):
                n = v

        if n == end or Graph_nodes[n] == None:
            pass
        else:
            for (m, weight) in neighbours(n):
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    g[m] = g[n] + weight
                    parents[m] = n

                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                        if m in closed_set:
                            closed_set.remove(m)
                            open_set.add(m)

        if n == None:
            print("path doesnt exists")
            return None

        if n == end:
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start)
            path.reverse()
            print('path found {}'.format(path))
            return path

        open_set.remove(n)
        closed_set.add(n)
        
    print('paath doesnt exists')
    return None

def neighbours(n):
    if n in Graph_nodes:
        return Graph_nodes[n]
    else:
        return None

def heuristics(n):
    h = {
        'A': 10,
        'B': 8,
        'C': 5,
        'D': 7,
        'E': 3,
        'F': 6,
        'G': 5,
        'H': 3,
        'I': 1,
        'J': 0,
    }
    return h[n]

Graph_nodes = {
    'A': [('B', 6), ('F', 3)],
    'B': [('C', 3), ('D', 2)],
    'C': [('D', 1), ('E', 5)],
    'D': [('C', 1), ('E', 1)],
    'E': [('I', 5), ('J', 5)],
    'F': [('G', 1), ('H', 7)],
    'G': [('I', 3)],
    'H': [('I', 2)],
    'I': [('E', 5), ('J', 3)],
}

astar('A', 'J')


Output:

path found ['A', 'F', 'G', 'I', 'J']
['A', 'F', 'G', 'I', 'J']




